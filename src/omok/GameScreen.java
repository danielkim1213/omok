/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package omok;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author kyw40
 */
public class GameScreen extends javax.swing.JFrame {

    StartScreen ss;
    private JLabel[][] lblSpace;
    private ImageIcon black, white, preBlack, preWhite;
    private int[] coord = new int[2];
    private String[][] spaceColor = new String[15][15];
    private String turn = "b";
    boolean gameOver = false;
    double counting = 0;
    DecimalFormat df = new DecimalFormat("#");
    
    /**
     * Creates new form GameScreen
     */
    public GameScreen(StartScreen ss) {
        initComponents();
        this.ss = ss;
        makeSpaces();
        stoneImages();
        for(int i=0; i< 15; i++)
        {
            for(int j = 0; j< 15; j++)
            {
                spaceColor[i][j] = "";
            }
        }
    }
    
    private void makeSpaces()
    {
        lblSpace = new JLabel[15][15];
        for(int i=0; i<15; i++)
        {
            for(int k=0; k<15; k++)
            {
                lblSpace[i][k] = new JLabel();
                jPanel1.add(lblSpace[i][k], new org.netbeans.lib.awtextra.AbsoluteConstraints((int)(11+45.7*k), (int)(11+45.7*i), 40, 40));
            }
        }
        
        JLabel lblBackground = new JLabel();
        BufferedImage gomokuBoard;
        try {
            gomokuBoard = ImageIO.read(GameScreen.class.getResource("Images/GomokuBoard.png"));
            lblBackground.setIcon(new ImageIcon(gomokuBoard.getScaledInstance(700, 700, Image.SCALE_SMOOTH)));
        } catch (IOException ex) {
            System.out.print("Image Exception");
        }
        
        lblBackground.setOpaque(true);
        jPanel1.add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }
    
    private void stoneImages()
    {
        BufferedImage blackStone;
        BufferedImage whiteStone;
        BufferedImage preBlackStone;
        BufferedImage preWhiteStone;
        URL url0 = GameScreen.class.getResource("Images/black.png");
        URL url1 = GameScreen.class.getResource("Images/white.png");
        URL url2 = GameScreen.class.getResource("Images/preBlack.png");
        URL url3 = GameScreen.class.getResource("Images/preWhite.png");
        try {
            blackStone = ImageIO.read(url0);
            black = new ImageIcon(blackStone.getScaledInstance(40, 40, Image.SCALE_SMOOTH));
            whiteStone = ImageIO.read(url1);
            white = new ImageIcon(whiteStone.getScaledInstance(40, 40, Image.SCALE_SMOOTH));
            preBlackStone = ImageIO.read(url2);
            preBlack = new ImageIcon(preBlackStone.getScaledInstance(40, 40, Image.SCALE_SMOOTH));
            preWhiteStone = ImageIO.read(url3);
            preWhite = new ImageIcon(preWhiteStone.getScaledInstance(40, 40, Image.SCALE_SMOOTH));
        } catch (IOException ex) {
            System.out.println(ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMainMenu = new javax.swing.JButton();
        lblLocation = new javax.swing.JLabel();
        lblWin = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblBestMove = new javax.swing.JLabel();
        lblCounter = new javax.swing.JLabel();
        btnRestart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnMainMenu.setText("Main Menu");
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });
        getContentPane().add(btnMainMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 10, -1, -1));

        lblLocation.setText("jLabel1");
        getContentPane().add(lblLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 110, -1, -1));

        lblWin.setText("jLabel1");
        getContentPane().add(lblWin, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 180, -1, -1));

        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("0            1            2            3            4            5            6            7            8            9           10           11           12          13          14");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 720, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 700, 700));

        lblBestMove.setText("Best Move: ");
        getContentPane().add(lblBestMove, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 490, -1, -1));

        lblCounter.setText("jLabel1");
        getContentPane().add(lblCounter, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 520, -1, -1));

        btnRestart.setText("Restart");
        btnRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestartActionPerformed(evt);
            }
        });
        getContentPane().add(btnRestart, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 590, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        ss.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnMainMenuActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        if(!gameOver)
        {
            int x = (int)((evt.getX()-5.5)/45.7);
            int y = (int)((evt.getY()-5.5)/45.7);

            x = rounding(x);
            y = rounding(y);

            boolean isOmok = false;
            
            

            if(spaceColor[y][x] == "")
            {
                spaceColor[y][x] = turn;
                if(turn == "b")
                {
                    lblSpace[y][x].setIcon(black);
                    turn = "w";
                    if(checkOmok(y, x, "b", spaceColor) == Integer.MAX_VALUE)
                    {
                        JOptionPane.showMessageDialog(null, "Black Wins!");
                        gameOver = true;
                    }
                    
                }
                else
                {
                    lblSpace[y][x].setIcon(white);
                    turn = "b";
                    if(checkOmok(y, x, "w", spaceColor) == Integer.MAX_VALUE)
                    {
                        JOptionPane.showMessageDialog(null, "White Wins!");
                        gameOver = true;
                    }
                }
                
                makeMove();
            }
        }
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        int x = (int)((evt.getX()-5.5)/45.7);
        int y = (int)((evt.getY()-5.5)/45.7);
        
        x = rounding(x);
        y = rounding(y);
        
        lblLocation.setText(y + ", " + x);
        
        if(spaceColor[coord[1]][coord[0]] == "")
        {
            lblSpace[coord[1]][coord[0]].setIcon(null);
        }
        if(spaceColor[y][x] == "")
        {
            if(turn == "b")
            {
                lblSpace[y][x].setIcon(preBlack);
            }
            else
            {
                lblSpace[y][x].setIcon(preWhite);
            }
        }
        coord[0] = x;
        coord[1] = y;
    }//GEN-LAST:event_jPanel1MouseMoved

    private void btnRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestartActionPerformed
        GameScreen gsNew = new GameScreen(ss);
        gsNew.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnRestartActionPerformed

    private void makeMove()
    {
        if(turn == "b")
        {
            return;
        }
        
        
        int[] bestMove = new int[]{-1, -1};
        int bestScore = Integer.MIN_VALUE;
        
        String[][] board = new String[15][15];
        for(int i = 0; i < 15; i++)
        {
            for(int j=0; j < 15; j++)
            {
                board[i][j] = spaceColor[i][j];
            }
        }
        
        
        
        for(int i = 0; i < 15; i++)
        {
            for(int j=0; j < 15; j++)
            {
                if(board[i][j] == "")
                {
                    if(!checkNearby(i, j, board, 1))
                    {
                        continue;
                    }
                    board[i][j] = "w"; //assume computer puts white rock at [i][j]
                    int score = minimax(i, j, board, 0, Integer.MIN_VALUE, Integer.MAX_VALUE, false);
                    if(score >= bestScore)
                    {
                        bestMove[0] = i;
                        bestMove[1] = j;
                        bestScore = score;
                    }
                    board[i][j] = "";
                }
                
            }
            
        }
        lblCounter.setText("Count: " + df.format(counting) + ", " + bestScore);
        counting = 0;
        lblBestMove.setText("Best Move: " + bestMove[0] + "," + bestMove[1]);
        
    }
    
    
    private int minimax(int r, int c, String[][] board, int depth, int alpha, int beta, boolean AITurn) {
        
        counting++;

        if(depth == 5)
        {
            return 0;
        }
       

        if (AITurn) {
            int k = checkOmok(r, c, "b", board);
            switch (k) {
                case Integer.MAX_VALUE:
                    return -10000;
                case 5:
                    return -1000;
                case 4: 
                    return -100;
                default:
                    break;
            }
            int bestScore = Integer.MIN_VALUE;
            for (int row = 0; row < 15; row++) {
                for (int col = 0; col < 15; col++) {
                    if (board[row][col].equals("")) {
                        if(!checkNearby(row, col, board, 1))
                        {
                            continue;
                        }
                        board[row][col] = "w";
                        int score = minimax(row, col, board, depth + 1, alpha, beta, false);
                        board[row][col] = "";
                        bestScore = Math.max(score, bestScore);
                        alpha = Math.max(alpha, bestScore);
                        if (beta <= alpha) {
                            break; 
                        }
                    }
                }
            }
            return bestScore;
        } else {
            int k = checkOmok(r, c, "w", board);
            switch (k) {
                case Integer.MAX_VALUE:
                    return 10000;
                default:
                    break;
            }
            int bestScore = Integer.MAX_VALUE;
            for (int row = 0; row < 15; row++) {
                for (int col = 0; col < 15; col++) {
                    if (board[row][col].equals("")) {
                        if(!checkNearby(row, col, board,1))
                        {
                            continue;
                        }
                        board[row][col] = "b";
                        int score = minimax(row, col, board, depth + 1, alpha, beta, true);
                        board[row][col] = "";
                        bestScore = Math.min(score, bestScore);
                        beta = Math.min(beta, bestScore);
                        if (beta <= alpha) {
                            break;
                        }
                    }
                }
            }
                        
            return bestScore;
        }
    }

    //the return value of this will determine minimax
    private int checkOmok(int row, int col, String color, String[][] board)
    {
        int X = count(row, col, color, new int[]{0, -1}, 0, board)[0] + count(row, col, color, new int[]{0, 1}, 0, board)[0];
        int Y = count(row, col, color, new int[]{-1, 0}, 0, board)[0] + count(row, col, color, new int[]{1, 0}, 0, board)[0];
        int negative = count(row, col, color, new int[]{-1, -1}, 0, board)[0] + count(row, col, color, new int[]{1, 1}, 0, board)[0];
        int positive = count(row, col, color, new int[]{1, -1}, 0, board)[0] + count(row, col, color, new int[]{-1, 1}, 0, board)[0];
        
        if(Math.max(X, Math.max(Y, Math.max(negative, positive))) == 4)
        {
            return Integer.MAX_VALUE;
        }
        
        int countX = X + count(row, col, color, new int[]{0, -1}, 0, board)[1] + count(row, col, color, new int[]{0, 1}, 0, board)[1];
        int countY = Y + count(row, col, color, new int[]{-1, 0}, 0, board)[1] + count(row, col, color, new int[]{1, 0}, 0, board)[1];
        int countNegative = negative + count(row, col, color, new int[]{-1, -1}, 0, board)[1] + count(row, col, color, new int[]{1, 1}, 0, board)[1];
        int countPositive = positive + count(row, col, color, new int[]{1, -1}, 0, board)[1] + count(row, col, color, new int[]{-1, 1}, 0, board)[1];
        
        return Math.max(countX, Math.max(countY, Math.max(countNegative, countPositive)));
    }
    
    private boolean checkNearby(int row, int col, String[][] board, int x)
    {
        for(int i = -x; i<= x; i++)
        {
            for(int j = -x; j<= x; j++)
            {
                if(i == 0 && j == 0)
                {
                    continue;
                }
                if(board[rounding(row + i)][rounding(col + j)] != "")
                {
                    return true;
                }
                
            }
        }
        return false;
    }
    
    private int[] count(int row, int col, String color, int[] direction, int depth, String[][] board)
    {
        row += direction[0];
        col += direction[1];
        
        if(row < 0 || row > 14 || col< 0 || col > 14)
        {
            int x[] = {depth, 0};
            return x;
        }
        
        if(board[row][col] == "")
        {
            int x[] = {depth, 1};
            return x;
        }
        else if(board[row][col] != color)
        {
            int x[] = {depth, 0};
            return x;
        }
        else
        {
            return count(row, col, color, direction, depth+1, board);
        }
    }

    private int rounding(int a)
    {
        if(a > 14)
        {
            a = 14;
        }
        else if(a<0){
            a = 0;
        }
        return a;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton btnRestart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblBestMove;
    private javax.swing.JLabel lblCounter;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblWin;
    // End of variables declaration//GEN-END:variables
}
